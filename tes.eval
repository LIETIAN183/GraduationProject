#version 400 core
layout (quads, equal_spacing, cw) in;
in vec2 tes_texCoord[];

out vec2 texCoord;
out vec3 Normal;
out vec3 FragPos;

uniform mat4 inverse;

//----------------------------------------------------------------------------

float B( int i, float u)
{
    int bc[4] = int[4](1,3,3,1);

    return bc[i] * pow( u, i ) * pow( 1.0 - u, 3 - i );
}

//----------------------------------------------------------------------------

vec4 Bezier(vec2 at)
{
    vec4  pos = vec4( 0.0 );

    for ( int i = 0; i < 4; i++ ) {
        for ( int j = 0; j < 4; j++ ) {
            pos += B( i, at.x ) * B( j, at.y ) * gl_in[4*i+j].gl_Position;
        }
    }

    return pos;
}

vec4 Bezier2(vec2 at)
{
    vec4  pos = vec4( 0.0 );

    for ( int i = 0; i < 4; i++ ) {
        for ( int j = 0; j < 4; j++ ) {
            pos += B( i, at.x ) * B( j, at.y ) * vec4(tes_texCoord[4*i+j],0,0);
        }
    }
    return pos;
}

vec4 quadratic_bezier(vec4 A, vec4 B, vec4 C, float t) {
  vec4 D = mix(A, B, t);
  vec4 E = mix(B, C, t);
  return mix(D, E, t);
}

vec4 cubic_bezier(vec4 A, vec4 B, vec4 C, vec4 D, float t) {
  vec4 E = mix(A, B, t);
  vec4 F = mix(B, C, t);
  vec4 G = mix(C, D, t);
  return quadratic_bezier(E, F, G, t);
}

vec4 evaluate_patch(vec2 at) {
  vec4 P[4]; int i;
  for (i = 0; i < 4; i++) {
    P[i] = cubic_bezier(gl_in[i + 0].gl_Position,
                        gl_in[i + 4].gl_Position,
                        gl_in[i + 8].gl_Position,
                        gl_in[i + 12].gl_Position, at.y);
  }
  return cubic_bezier(P[0], P[1], P[2], P[3], at.x);
}

vec4 evaluate_patch2(vec2 at) {
  vec4 P[4]; int i;
  for (i = 0; i < 4; i++) {
    P[i] = cubic_bezier(vec4(tes_texCoord[i + 0],0,0),
                        vec4(tes_texCoord[i + 4],0,0),
                        vec4(tes_texCoord[i + 8],0,0),
                        vec4(tes_texCoord[i + 12],0,0), at.y);
  }
  return cubic_bezier(P[0], P[1], P[2], P[3], at.x);
}

const float epsilon = 0.001;

void main(void) {
    //使用Bezier函数时，法向量的计算存在问题
    vec4 p1 = evaluate_patch(gl_TessCoord.xy);
    //vec4 p1 = Bezier(gl_TessCoord.xy);
    gl_Position = p1;

    //normal vector 法向量
    vec4 p2 = evaluate_patch(gl_TessCoord.xy + vec2(0.0, epsilon));
    vec4 p3 = evaluate_patch(gl_TessCoord.xy + vec2(epsilon, 0.0));
    //vec4 p2 = Bezier(gl_TessCoord.xy + vec2(epsilon, 0.0));
    //vec4 p3 = Bezier(gl_TessCoord.xy + vec2(0.0, epsilon));

    vec3 v1 = normalize(p2.xyz - p1.xyz);
    vec3 v2 = normalize(p3.xyz - p1.xyz);
    Normal = cross(v1, v2);


    //纹理坐标
    vec4 p4 = evaluate_patch2(gl_TessCoord.xy);
    //vec4 p4 = Bezier2(gl_TessCoord.xy);
    texCoord = vec2(p4.x,p4.y);

    //FragPos
    FragPos = vec3(inverse * gl_Position);
}
