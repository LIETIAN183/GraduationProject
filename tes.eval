#version 400 core
layout (quads, equal_spacing, cw) in;
in vec2 tes_texCoord[];
out vec2 texCoord;

vec4 quadratic_bezier(vec4 A, vec4 B, vec4 C, float t) {
  vec4 D = mix(A, B, t);
  vec4 E = mix(B, C, t);
  return mix(D, E, t);
}

vec4 cubic_bezier(vec4 A, vec4 B, vec4 C, vec4 D, float t) {
  vec4 E = mix(A, B, t);
  vec4 F = mix(B, C, t);
  vec4 G = mix(C, D, t);
  return quadratic_bezier(E, F, G, t);
}

vec4 evaluate_patch(vec2 at) {
  vec4 P[4]; int i;
  for (i = 0; i < 4; i++) {
    P[i] = cubic_bezier(gl_in[i + 0].gl_Position,
                        gl_in[i + 4].gl_Position,
                        gl_in[i + 8].gl_Position,
                        gl_in[i + 12].gl_Position, at.y);
  }
  return cubic_bezier(P[0], P[1], P[2], P[3], at.x);
}

vec4 evaluate_patch2(vec2 at) {
  vec4 P[4]; int i;
  for (i = 0; i < 4; i++) {
    P[i] = cubic_bezier(vec4(tes_texCoord[i + 0],0,0),
                        vec4(tes_texCoord[i + 4],0,0),
                        vec4(tes_texCoord[i + 8],0,0),
                        vec4(tes_texCoord[i + 12],0,0), at.y);
  }
  return cubic_bezier(P[0], P[1], P[2], P[3], at.x);
}

void main(void) {
  vec4 p1 = evaluate_patch(gl_TessCoord.xy);
  gl_Position = p1;

  vec4 p2 = evaluate_patch2(gl_TessCoord.xy);
  texCoord = vec2(p2.x,p2.y);

}


/*代码有问题，有空研究
//----------------------------------------------------------------------------

float
B( int i, float u )
{
    const vec4 bc = vec4( 1, 3, 3, 1 );

    return bc[i] * pow( u, i ) * pow( 1.0 - u, 3 - i );
}

//----------------------------------------------------------------------------

void main()
{
    vec4  pos = vec4( 0.0 );

    float  u = gl_TessCoord.x;
    float  v = gl_TessCoord.y;

    for ( int j = 0; j < 4; ++j ) {
        for ( int i = 0; i < 4; ++i ) {
            pos += B( i, u ) * B( j, v ) * gl_in[4*j+i].gl_Position;
        }
    }
    gl_Position = pos;
}
*/
